#						  [MakeFile for Siexgran's Project]
#--------------------------------------------------------------------------------------------#
#	
#
#
MSG := echo Builded succesfuly!
#			  						[HEADERS PATHS]
#--------------------------------------------------------------------------------------------#
#	
#	>>	MAIN PROJECT HEADERS
#
#	>>	HEADERS PATH
HEADERS :=$(shell find ./ -iname *.h* )
DIRHEADERS :=$(subst engine,./siexgran engine,$(patsubst %,"%",$(patsubst /www%,,$(sort $(sort $(dir $(HEADERS)))))))
PATH_HEADERS :=$(subst /",",$(subst "./,-I "$(PWD)/,$(DIRHEADERS)))
COREHEADERS =: siexgran engine/componentstorage.hpp \
siexgran engine/entitymanager.hpp \
siexgran engine/utils/common_tags_cmps_traits.hpp \
siexgran engine/utils/logic4ecs.hpp \
siexgran engine/utils/showmem.hpp \
siexgran engine/utils/slotmap.hpp \
siexgran engine/utils/typetraits.hpp 
PWD :=$(shell pwd)

#									[CONFIGURATION]
#--------------------------------------------------------------------------------------------#
#
#	>>	OUTPUT FILE
APP := game
EXTENSION := .exe
#	>>	DEFAULT RULE VARIABLE
#	Stores the rule to set in 'remake' rule for debbugin, release or test build
VERSION := DEBUG 
#	>>	COMPLILERS VARIABLES 
CC := g++
C := gcc
#	>>	STANDARD VARIABLES 
CCSTD := -std=c++20 
CSTD := -std=c17
#	>>	FLAGS VARIABLES 
CCFLAGS :=$(CCSTD) $(PATH_HEADERS) -Wall -Wpedantic -Wconversion #-fsanitize=undefined -O3
CFLAGS :=$(CSTD) $(PATH_HEADERS) -Wall -Wpedantic -Wconversion  #-fsanitize=undefined -O3

#
#
LIBSPATH := -L/c/'Program Files (x86)'/'Windows Kits'/10/Lib/'10.0.19041.0'/um/x64
LIBS := -lOpenGl32 -lGdi32


# ---------------- | ------------- | --- | [VERSION] | --- | ------------- | --------------- # 
ifdef RELEASE 	#	>>	RELEASE VERSION
$(APP) += v$(RELEASE)
VERSION := RELEASE
EXEDIR := ./exe/
CCFLAGS += -O3
CFLAGS += -O3
else
ifdef TEST 		#	>>	TEST VERSION
$(APP) += snapshot v$(TEST)
VERSION:= TEST
CCFLAGS += -O3
CFLAGS += -O3
else 			#	>>	DEFAULT VERSION
$(APP) += _debug_version
VERSION := DEBUG
CCFLAGS += -DDEBUG -g
CFLAGS += -DDEBUG -g
BUILD := $(BIN)/$(VERSION)
endif
endif  


#										[PREFIX]
#--------------------------------------------------------------------------------------------#
#
BIN := ./.BIN
SRC := ./src
BUILD :=$(BIN)/$(VERSION)
ODIR :=$(BUILD)/obj/
DDIR :=$(BUILD)/dep/
EXEDIR :=$(BUILD)/exe/


#		  						  [ALL CPP AND C FILES]
#--------------------------------------------------------------------------------------------#
#
ALLCPPS :=$(shell find ./ -iname *.cpp -not -iname *glx*)
ALLCS :=$(shell find ./ -iname *.c -not -iname *glx*)

#	  						 [PATHS FOR EVERY CPP OR C OBJ]
#--------------------------------------------------------------------------------------------#
#	
#								>	SETPATHS MACRO	<
#	$(1): New patht
#	$(2): Source file
#
define SETPATH
$(subst ./,$(1),$(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(2))))
endef
#	>>	AUXILIAR VARIABLES FOR READABILITY
CPPOBJS :=$(patsubst %.cpp,%.o, $(ALLCPPS))
COBJS :=$(patsubst %.c,%.o, $(ALLCS))
#	>>	PATHS' VARIABLES
PATHCPPOBJS :=$(call SETPATH,$(ODIR),$(CPPOBJS))
PATHCOBJS :=$(call SETPATH,$(ODIR),$(COBJS))
#	>>	DIRS VARIABLES
DIRCPPOBJS :=$(sort $(dir $(PATHCPPOBJS)))
DIRCOBJS :=$(sort $(dir $(PATHCOBJS)))
#	>>	OUTPUT'S EXECUTABLE DIRECTORY
COMPILE :=$(EXEDIR)$(APP)$(EXTENSION)

#	    						[VAR-FUNCTIONS TO COMPILE]
#--------------------------------------------------------------------------------------------#
#
#
#	>	MAKEOBJS MACRO	<
#	$(1): Compiler 
#	$(2): Output file
#	$(3): Source files
#	$(4): Another dependencies
#	$(5): Flags
#
define MAKEOBJ
$(2): $(3) $(4)
	$(1) -c -o $(2) $(3) $(5)
endef 
#

#										 [RULES]
#--------------------------------------------------------------------------------------------#
#
#	>>	PHONY RULES
.PHONY: show_info clear




#	>>	MAIN RULE
$(APP): $(DIRCPPOBJS) $(DIRCOBJS) $(EXEDIR) $(COMPILE)



#	>>	EXECUTABLE RULE
$(COMPILE): $(PATHCPPOBJS) $(PATHCOBJS)
	$(CC) -o $@ $^ $(LIBSPATH) $(LIBS) $(CCFLAGS)
	echo $(shell "    \n")
	$(MSG)

#	>>	REMAKE RULE
rebuild: clean $(APP)

#	>>	CLEAN RULE
clean:
	rm -r $(BIN)



# -------------------------------------- > HELPERS < -------------------------------------- #
#	>>	CPP HELPER RULE
$(DIRCPPOBJS): $(ALLCPPS)
	mkdir -p $(@D)
	$(FOREACH_CPPOBJS)

#	>>	C HELPER RULE
$(DIRCOBJS): $(ALLCS)
	mkdir -p $(@D)
	$(FOREACH_COBJS)

$(EXEDIR):
	mkdir -p $@

show_info:
	$(info $(PATH_HEADERS))
	$(info $(ALLCPPS))
	$(info $(ALLCS))


#        >> RULE'S GENERATOR FOR COMPILE MULTIPLE FILES
#
FOREACH_CPPOBJS :=$(foreach cppobj,$(ALLCPPS),$(eval $(call MAKEOBJ,$(CC),$(call SETPATH,$(ODIR),$(cppobj)),$(cppobj), ,$(CCFLAGS))))
#
FOREACH_COBJS :=$(foreach cobj,$(ALLCS),$(eval $(call MAKEOBJ,$(C),$(call SETPATH,$(ODIR),$(cobj)),$(cobj), ,$(CFLAGS))))


