#	[MakeFile for Siexgran's Project]
#---------------------------------------#
#	
#
#

#			[CONFIGURATION]
#---------------------------------------#
#
#	>>	OUTPUT'S FILES
APP := game
#	>>	COMPLILERS VARIABLES 
CC := g++
C := gcc
#	>>	STANDARD VARIABLES 
CCSTD := -std=c++20 
CSTD := -std=c17
#	>>	FLAGS VARIABLES 
CCFLAGS :=$(CCSTD) $(PROJECT_LIBS) -Wall -Wpedantic -Wconversion -fsanitize=undefined 
CFLAGS :=$(CSTD) $(PROJECT_LIBS) -Wall -Wpedantic -Wconversion -fsanitize=undefined 

#			  [LIBS PATHS]
#---------------------------------------#
#	
#	>>	MAIN PROJECT LIBS
PROJECT_LIBS=$(ECSENGINE_LIBS_PATH) $(MYOPGL_LIBS_PATH) $(VENDORS_LIBS_PATH)
#	>>	SIEXGRAN ENGINE PATH
ECSENGINE_LIBS_PATH := -I dir "./siexgran engine"
#	>>	OPENGL RENDER ENGINE PATH
MYOPGL_LIBS_PATH := -I dir "./OpenGl/OpenGL3D/include" -I dir "./OpenGL/OpenGL3D/source"
#	>>	VENDORS PATH
VENDORS_LIBS_PATH := -I dir "./vendors
#	>> THIRD PARTY'S LIBS PATH
LIBS :=


#				[PREFIX]
#---------------------------------------#
#
SRC := ./src/
BIN := BIN
ODIR := ./$(BIN)/obj/
DDIR := ./$(BIN)/dep/
EXEDIR := ./$(BIN)/exe/

#		  [ALL CPP AND C FILES]
#---------------------------------------#
#
ALLCPPS :=$(shell find ./ -iname *.cpp)
ALLCS :=$(shell find ./ -iname *.c)

#	  [PATHS FOR EVERY CPP OR C OBJ]
#---------------------------------------#
#	
#	>>	AUXILIAR VARIABLES FOR READIBILITY
CPPOBJS :=$(patsubst %.cpp,%.o, $(ALLCPPS))
COBJS :=$(patsubst %.c,%.o, $(ALLCS))
#	>>	PATHS' VARIABLES
PATHCPPOBJS :=$(subst ./,$(ODIR),$(CPPOBJS))
PATHCOBJS :=$(subst ./,$(ODIR),$(COBJS))

#	    [VAR-FUNCTIONS TO COMPILE]
#---------------------------------------#
#
#
#	>	MAKEOBJS MACRO	<
#	$(1): Compiler 
#	$(2): Output file
#	$(3): Source files
#	$(4): Another dependencies
#	$(5): Flags
#
define MAKEOBJS
$(2): $(3) $(4)
$(1) -c -o $(2) $(3) $(5)
endef 
#
#	>	SETPATHS MACRO	<
#	$(1): New path
#	$(2): Source file
#
define SETPATH
$(subst ./,$(1),$(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(2))))
endef

#MAKECPPOBJS =$($(CC) -o $(subst ./,$(ODIR),$(patsubst %.cpp,%.o,$(input))) -c $(input) $(CCFLAGS) $(PROJECT_LIBS) )
#MAKECOBJS =$($(C) -o $(subst ./,$(ODIR),$(patsubst %.c,%.o,$(input))) -c $(input) $(CFLAGS) $(PROJECT_LIBS))
#
#        >> RULE'S GENERATOR FOR COMPILE MULTIPLE FILES

#FOREACH_CPPOBJS :=$(foreach cppobj,$(ALLCPPS),$(eval $(call $(MAKECPPOBJS) $(cppobj))))
#FOREACH_COBJS :=$(foreach cobj,$(ALLCS) ,$(eval $(call $(MAKECPPOBJS) $(cobj))))

#
FOREACH_CPPOBJS :=$(foreach cppobj,$(ALLCPPS),$(eval $(call $(MAKEOBJS),$(CC),$(call $(SETPATH),$(ODIR),$(cppobj)),$(cppobj),,$(CCFLAGS))))
#
FOREACH_COBJS :=$(foreach cobj,$(ALLCS),$(eval $(call $(MAKEOBJS),$(C),$(call $(SETPATH),$(ODIR),$(cobj)),$(cobj),,$(CFLAGS))))

#				 [RULES]
#---------------------------------------#
#
#	>>	PHONY RULES
.PHONY: show_info clear







#	>>	MAIN RULE
$(APP): $(PATHCPPOBJS) $(PATHCOBJS)
	$(CC) -o $@ $^ $(LIBS)

#	>>	CPP HELPER RULE
$(PATHCPPOBJS): $(ALLCPPS)
	mkdir -p $(@D)
	$(FOREACH_CPPOBJS)


#	>>	C HELPER RULE
$(PATHCOBJS): $(ALLCS)
	mkdir -p $(@D)
	$(FOREACH_COBJS)

#	>>	REMAKE RULE
remake: clean $(APP)

#	>>	CLEAN RULE
clean:
	rm -r $(ODIR)

show_info:
	$(info $(PATHCPPOBJS))
	$(info $(PATHCOBJS))
	$(info $(ALLCPPS))
	$(info $(ALLCS))




